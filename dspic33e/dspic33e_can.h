#ifndef CANLIB_DSPIC33E_CAN_H
#define CANLIB_DSPIC33E_CAN_H

#include "can.h"

#ifdef __cplusplus
#error "C++ is not supported"
#endif

/**
 * @brief Initialize DSPIC33E CAN Controller
 *
 * @param timing Timing parameters generated by `can_generate_timing_params` function
 * @param receive_callback CAN message receive handler, the function would be called when a CAN
 * message is received
 * @param run_in_loopback Run CAN Controller in loopback mode when `true`
 *
 * @warning Note that this function DOES NOT setup the inputs and outputs from the CAN module to the
 * output pins, application code must do that. In order to do that, CANRXPPS must be set to the
 * proper pin value for the CANRX pin, and ___PPS must be set to 0x33 to mark it as outputting from
 * the CAN module. In addition, TRIS and ANSEL registers for whatever pin is being used must be set
 * to the right values.
 */
void dspic33e_can_init(const can_timing_t *timing,
					   void (*receive_callback)(const can_msg_t *message), bool run_in_loopback);

/**
 * @brief Send a CAN message
 *
 * @param message CAN message to be sent
 */
void dspic33e_can_send(const can_msg_t *message);

/**
 * @brief Check if CAN controller is ready to send a message
 *
 * @return return `true` if ready to send a message
 */
bool dspic33e_can_send_rdy(void);

#endif
